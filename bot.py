# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç ¬´–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤¬ª –Ω–∞ aiogram 3.x

–§—É–Ω–∫—Ü–∏–∏:
- –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç—É —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞.
- –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏:
    ‚Ä¢ ¬´–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É¬ª -> –∑–∞–∫–∞–∑—á–∏–∫—É: ¬´–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É ‚úÖ¬ª
    ‚Ä¢ ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª        -> –∑–∞–∫–∞–∑—á–∏–∫—É: ¬´–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!¬ª
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ orders.txt (–∏–º—è, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–µ–∫—Å—Ç).
- –ó–∞—â–∏—Ç–∞ –∫–Ω–æ–ø–æ–∫: –Ω–∞–∂–∏–º–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
- –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π (–∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã).
"""

import asyncio
import logging
import uuid
from dataclasses import dataclass
from datetime import datetime
import html as py_html  # –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
# 1) –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô –¢–û–ö–ï–ù –ë–û–¢–ê:
BOT_TOKEN = "8383740107:AAHOcdULmxFo5a5YtL4-aJ6tvjbnT5SiVI8"

# 2) –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô TELEGRAM ID (–∞–¥–º–∏–Ω, –∫—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –∂–º—ë—Ç –∫–Ω–æ–ø–∫–∏):
ADMIN_ID = 1145467601  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —á–∏—Å–ª–æ–≤–æ–π ID

# =====================================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)

router = Router()

# ===== –ú–æ–¥–µ–ª—å –∏ ¬´—Ö—Ä–∞–Ω–∏–ª–∏—â–µ¬ª –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞) =====
@dataclass
class Order:
    order_id: str
    user_id: int
    user_name: str
    text: str
    status: str  # 'new' | 'in_progress' | 'done'
    admin_msg_id: int | None = None

# –ü–æ –∫–ª—é—á—É order_id
ORDERS: dict[str, Order] = {}


# ===================== –£–¢–ò–õ–ò–¢–´ =====================

def display_name(user: types.User) -> str:
    """–ß–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–æ–≤/–∞–¥–º–∏–Ω–∞."""
    parts = [user.first_name or "", user.last_name or ""]
    name = " ".join(p for p in parts if p).strip()
    if not name and user.username:
        name = f"@{user.username}"
    return name or f"id{user.id}"

def status_label(status: str) -> tuple[str, str]:
    """–ò–∫–æ–Ω–∫–∞ –∏ –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞."""
    match status:
        case "new":
            return "üÜï", "–ù–æ–≤—ã–π"
        case "in_progress":
            return "‚è≥", "–í —Ä–∞–±–æ—Ç–µ"
        case "done":
            return "‚úÖ", "–ó–∞–∫—Ä—ã—Ç"
        case _:
            return "‚ùî", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def admin_order_text(o: Order) -> str:
    """–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –ø—Ä–æ –∑–∞–∫–∞–∑."""
    icon, label = status_label(o.status)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è HTML
    safe_text = py_html.escape(o.text)
    return (
        f"<b>–ó–∞–∫–∞–∑ #{o.order_id}</b>\n"
        f"üë§ –û—Ç: <code>{py_html.escape(o.user_name)}</code> (ID: <code>{o.user_id}</code>)\n"
        f"üí¨ –¢–µ–∫—Å—Ç: <i>{safe_text}</i>\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {icon} <b>{label}</b>"
    )

def kb_new(order_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ ¬´–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É¬ª)."""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"accept:{order_id}")
    kb.adjust(1)
    return kb.as_markup()

def kb_in_progress(order_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–≤ —Ä–∞–±–æ—Ç–µ'."""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚è≥ –í —Ä–∞–±–æ—Ç–µ", callback_data="noop")  # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    kb.button(text="üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{order_id}")
    kb.adjust(2)
    return kb.as_markup()

# ===================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====================

def log_order_created(o: Order):
    """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ñ–∞–π–ª orders.txt (–∏–º—è, ID, —Ç–µ–∫—Å—Ç)."""
    line = (
        f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
        f"{o.user_name} (ID: {o.user_id}) ‚Äî \"{o.text}\"\n"
    )
    with open("orders.txt", "a", encoding="utf-8") as f:
        f.write(line)

# ===================== –•–ï–ù–î–õ–ï–†–´ =====================

@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>¬´–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø¬ª</b>.\n\n"
        "–Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å–æ–æ–±—â—É –æ —Å—Ç–∞—Ç—É—Å–µ. üì®",
        parse_mode="HTML"
    )

@router.message(F.text)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–∫–∞–∑—ã
async def on_order(message: Message, bot: Bot):
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    o = Order(
        order_id=str(uuid.uuid4())[:8],  # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π ID
        user_id=message.from_user.id,
        user_name=display_name(message.from_user),
        text=message.text.strip(),
        status="new"
    )
    ORDERS[o.order_id] = o

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    try:
        log_order_created(o)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ orders.txt: %s", e)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! üôå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –µ–≥–æ –ø—Ä–∏–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É. üì®"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    admin_msg = await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_order_text(o),
        parse_mode="HTML",
        reply_markup=kb_new(o.order_id)
    )
    o.admin_msg_id = admin_msg.message_id
    logging.info("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ %s –æ—Ç %s (%s)", o.order_id, o.user_name, o.user_id)

@router.message(~F.text)  # –ù–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def on_non_text(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ üìù\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>¬´–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≤–∏–∑–∏—Ç–∫–∏¬ª</b>.",
        parse_mode="HTML"
    )

# -------- –ö–ù–û–ü–ö–ò (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) --------

@router.callback_query(F.data.startswith("accept:"))
async def on_accept(call: CallbackQuery, bot: Bot):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å
    if call.from_user.id != ADMIN_ID:
        await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    order_id = call.data.split(":", 1)[1]
    o = ORDERS.get(order_id)
    if not o:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return
    if o.status == "done":
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
        return
    if o.status == "in_progress":
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.", show_alert=False)
        return

    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    o.status = "in_progress"

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    try:
        await call.message.edit_text(
            admin_order_text(o),
            parse_mode="HTML",
            reply_markup=kb_in_progress(o.order_id)
        )
    except Exception:
        # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (—Ä–µ–¥–∫–æ)
        pass

    # –£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞
    try:
        await bot.send_message(
            chat_id=o.user_id,
            text="–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É ‚úÖ\n–ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!"
        )
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", o.user_id, e)

    await call.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")

@router.callback_query(F.data.startswith("done:"))
async def on_done(call: CallbackQuery, bot: Bot):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if call.from_user.id != ADMIN_ID:
        await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    order_id = call.data.split(":", 1)[1]
    o = ORDERS.get(order_id)
    if not o:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return
    if o.status == "done":
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=False)
        return

    # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª
    if o.status != "in_progress":
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É.", show_alert=True)
        return

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    o.status = "done"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞: —Å—Ç–∞–≤–∏–º ¬´–ó–∞–∫—Ä—ã—Ç¬ª –∏ –£–ë–ò–†–ê–ï–ú –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    # —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    try:
        await call.message.edit_text(
            admin_order_text(o),
            parse_mode="HTML",
            reply_markup=None  # —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        )
    except Exception:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    try:
        await bot.send_message(
            chat_id=o.user_id,
            text="–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
        )
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", o.user_id, e)

    await call.answer("–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç. –ì–æ—Ç–æ–≤–æ! ‚úÖ")

@router.callback_query(F.data == "noop")
async def on_noop(call: CallbackQuery):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ ¬´–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–µ¬ª –∫–Ω–æ–ø–∫–∏
    await call.answer("–≠—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞.", show_alert=False)


# ===================== –¢–û–ß–ö–ê –í–•–û–î–ê =====================

async def main():
    if BOT_TOKEN == "PASTE_YOUR_TELEGRAM_BOT_TOKEN_HERE":
        logging.warning("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ BOT_TOKEN! –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")
    bot = Bot(BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.include_router(router)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: %s", e)

if __name__ == "__main__":
    asyncio.run(main())
