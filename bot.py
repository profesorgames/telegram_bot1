# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç ¬´–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤¬ª (aiogram 3.x)

–ß—Ç–æ —É–º–µ–µ—Ç:
- –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ –∑–∞–∫–∞–∑.
- –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏:
    ‚Ä¢ ¬´–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É¬ª -> —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞: ¬´–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É ‚úÖ¬ª
    ‚Ä¢ ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª        -> —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞: ¬´–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!¬ª
- –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ orders.txt (–∏–º—è, ID, —Ç–µ–∫—Å—Ç).
- –ñ–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
- –ü–æ—Å–ª–µ ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª –∑–∞–∫–∞–∑ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è (–∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–∞—é—Ç).
"""

import asyncio
import logging
import uuid
from dataclasses import dataclass
from datetime import datetime
import html as py_html
import os

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.client.default import DefaultBotProperties   # <-- –Ω—É–∂–Ω–æ –¥–ª—è parse_mode –≤ 3.7+
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
# –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –∑–¥–µ—Å—å:
BOT_TOKEN = os.getenv("BOT_TOKEN", "8383740107:AAHOcdULmxFo5a5YtL4-aJ6tvjbnT5SiVI8")
ADMIN_ID  = int(os.getenv("ADMIN_ID", "1145467601"))  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID

# (–ï—Å–ª–∏ –¥–µ–ø–ª–æ–∏—à—å –Ω–∞ Render, —É–¥–æ–±–Ω–µ–µ –∑–∞–¥–∞—Ç—å BOT_TOKEN –∏ ADMIN_ID –≤ Environment Variables)
# ===============================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)

router = Router()

# ===== –ú–æ–¥–µ–ª—å –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ =====
@dataclass
class Order:
    order_id: str
    user_id: int
    user_name: str
    text: str
    status: str  # 'new' | 'in_progress' | 'done'
    admin_msg_id: int | None = None

ORDERS: dict[str, Order] = {}


# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def display_name(user: types.User) -> str:
    parts = [user.first_name or "", user.last_name or ""]
    name = " ".join(p for p in parts if p).strip()
    if not name and user.username:
        name = f"@{user.username}"
    return name or f"id{user.id}"

def status_label(status: str) -> tuple[str, str]:
    match status:
        case "new":
            return "üÜï", "–ù–æ–≤—ã–π"
        case "in_progress":
            return "‚è≥", "–í —Ä–∞–±–æ—Ç–µ"
        case "done":
            return "‚úÖ", "–ó–∞–∫—Ä—ã—Ç"
        case _:
            return "‚ùî", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def admin_order_text(o: Order) -> str:
    icon, label = status_label(o.status)
    safe_text = py_html.escape(o.text)
    return (
        f"<b>–ó–∞–∫–∞–∑ #{o.order_id}</b>\n"
        f"üë§ –û—Ç: <code>{py_html.escape(o.user_name)}</code> (ID: <code>{o.user_id}</code>)\n"
        f"üí¨ –¢–µ–∫—Å—Ç: <i>{safe_text}</i>\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {icon} <b>{label}</b>"
    )

def kb_new(order_id: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"accept:{order_id}")
    kb.adjust(1)
    return kb.as_markup()

def kb_in_progress(order_id: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚è≥ –í —Ä–∞–±–æ—Ç–µ", callback_data="noop")
    kb.button(text="üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{order_id}")
    kb.adjust(2)
    return kb.as_markup()

def log_order_created(o: Order):
    line = (
        f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
        f"{o.user_name} (ID: {o.user_id}) ‚Äî \"{o.text}\"\n"
    )
    with open("orders.txt", "a", encoding="utf-8") as f:
        f.write(line)


# ===== –•–µ–Ω–¥–ª–µ—Ä—ã =====
@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>¬´–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ–± –∞—á—É–Ω—É –µ–±–∞–ª–æ –Ω–∞—á–∏—Å—Ç–∏–ª–∏¬ª</b>.\n\n"
        "–Ø –ø–µ—Ä–µ–¥–∞–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å–æ–æ–±—â—É –æ —Å—Ç–∞—Ç—É—Å–µ. üì®",
        parse_mode="HTML",
    )

@router.message(F.text)  # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–∫–∞–∑—ã
async def on_order(message: Message, bot: Bot):
    o = Order(
        order_id=str(uuid.uuid4())[:8],
        user_id=message.from_user.id,
        user_name=display_name(message.from_user),
        text=message.text.strip(),
        status="new"
    )
    ORDERS[o.order_id] = o

    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        log_order_created(o)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ orders.txt: %s", e)

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! üôå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–°–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –µ–≥–æ –ø—Ä–∏–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É. üì®"
    )

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_msg = await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_order_text(o),
        parse_mode="HTML",
        reply_markup=kb_new(o.order_id)
    )
    o.admin_msg_id = admin_msg.message_id
    logging.info("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ %s –æ—Ç %s (%s)", o.order_id, o.user_name, o.user_id)

@router.message(~F.text)  # –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def on_non_text(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ üìù\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>¬´–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –≤–∏–∑–∏—Ç–∫–∏¬ª</b>.",
        parse_mode="HTML"
    )

# ----- –ö–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) -----
@router.callback_query(F.data.startswith("accept:"))
async def on_accept(call: CallbackQuery, bot: Bot):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    order_id = call.data.split(":", 1)[1]
    o = ORDERS.get(order_id)
    if not o:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return
    if o.status == "done":
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
        return
    if o.status == "in_progress":
        await call.answer("–£–∂–µ –≤ —Ä–∞–±–æ—Ç–µ.", show_alert=False)
        return

    o.status = "in_progress"

    try:
        await call.message.edit_text(
            admin_order_text(o),
            parse_mode="HTML",
            reply_markup=kb_in_progress(o.order_id)
        )
    except Exception:
        pass

    try:
        await bot.send_message(
            chat_id=o.user_id,
            text="–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É ‚úÖ\n–ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!"
        )
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", o.user_id, e)

    await call.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")

@router.callback_query(F.data.startswith("done:"))
async def on_done(call: CallbackQuery, bot: Bot):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    order_id = call.data.split(":", 1)[1]
    o = ORDERS.get(order_id)
    if not o:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return
    if o.status == "done":
        await call.answer("–£–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=False)
        return
    if o.status != "in_progress":
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É.", show_alert=True)
        return

    o.status = "done"

    try:
        await call.message.edit_text(
            admin_order_text(o),
            parse_mode="HTML",
            reply_markup=None  # —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∂–∞—Ç—å
        )
    except Exception:
        pass

    try:
        await bot.send_message(
            chat_id=o.user_id,
            text="–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
        )
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", o.user_id, e)

    await call.answer("–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç. –ì–æ—Ç–æ–≤–æ! ‚úÖ")

@router.callback_query(F.data == "noop")
async def on_noop(call: CallbackQuery):
    await call.answer("–≠—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞.", show_alert=False)


# ===== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =====
async def main():
    if BOT_TOKEN == "PASTE_YOUR_TELEGRAM_BOT_TOKEN_HERE":
        logging.warning("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ BOT_TOKEN! –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN "
                        "–∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

    # –í–ê–ñ–ù–û: –¥–ª—è aiogram 3.7+ parse_mode –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ default=DefaultBotProperties(...)
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    dp.include_router(router)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: %s", e)

if __name__ == "__main__":
    asyncio.run(main())
